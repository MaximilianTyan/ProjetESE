
pcb3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002720  08002720  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002734  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002734  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e36  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000138a  00000000  00000000  00026e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  000281f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  000289f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001085f  00000000  00000000  00029150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000877a  00000000  00000000  000399af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065ed8  00000000  00000000  00042129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8001  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c78  00000000  00000000  000a8054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026e4 	.word	0x080026e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026e4 	.word	0x080026e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <catch>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 450);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2500);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 900);
}

void catch(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 800);
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <catch+0x30>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	22c8      	movs	r2, #200	; 0xc8
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 450);
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <catch+0x30>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	22e1      	movs	r2, #225	; 0xe1
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2500);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <catch+0x30>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a05      	ldr	r2, [pc, #20]	; (80004dc <catch+0x34>)
 80004c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1200);
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <catch+0x30>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2296      	movs	r2, #150	; 0x96
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000028 	.word	0x20000028
 80004dc:	000009c4 	.word	0x000009c4

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb22 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f82a 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f9a6 	bl	800083c <MX_GPIO_Init>
  MX_TIM21_Init();
 80004f0:	f000 f920 	bl	8000734 <MX_TIM21_Init>
  MX_TIM2_Init();
 80004f4:	f000 f880 	bl	80005f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim21,TIM_CHANNEL_1);
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <main+0x58>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fc03 	bl	8001d08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0x5c>)
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fb73 	bl	8001bf0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_1);
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <main+0x5c>)
 800050c:	2100      	movs	r1, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fbfa 	bl	8001d08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_2);
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x5c>)
 8000516:	2104      	movs	r1, #4
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fbf5 	bl	8001d08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0x5c>)
 8000520:	2108      	movs	r1, #8
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fbf0 	bl	8001d08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0x5c>)
 800052a:	210c      	movs	r1, #12
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fbeb 	bl	8001d08 <HAL_TIM_PWM_Start_IT>


	  //robotique bras
	  //control_stop_yuan();
  	  //get_ready();
  	  catch();
 8000532:	f7ff ffb9 	bl	80004a8 <catch>
 8000536:	e7fc      	b.n	8000532 <main+0x52>
 8000538:	20000068 	.word	0x20000068
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b093      	sub	sp, #76	; 0x4c
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2334      	movs	r3, #52	; 0x34
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 f8bf 	bl	80026d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	003b      	movs	r3, r7
 8000558:	0018      	movs	r0, r3
 800055a:	2314      	movs	r3, #20
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f002 f8b8 	bl	80026d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xb4>)
 800056a:	401a      	ands	r2, r3
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <SystemClock_Config+0xb0>)
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0109      	lsls	r1, r1, #4
 8000572:	430a      	orrs	r2, r1
 8000574:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2210      	movs	r2, #16
 8000588:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	02d2      	lsls	r2, r2, #11
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	03d2      	lsls	r2, r2, #15
 80005a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fd77 	bl	800109c <HAL_RCC_OscConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005b2:	f000 f995 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	003b      	movs	r3, r7
 80005b8:	220f      	movs	r2, #15
 80005ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	003b      	movs	r3, r7
 80005be:	2203      	movs	r2, #3
 80005c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	003b      	movs	r3, r7
 80005d6:	2101      	movs	r1, #1
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f8db 	bl	8001794 <HAL_RCC_ClockConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e2:	f000 f97d 	bl	80008e0 <Error_Handler>
  }
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b013      	add	sp, #76	; 0x4c
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40007000 	.word	0x40007000
 80005f4:	ffffe7ff 	.word	0xffffe7ff

080005f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	2318      	movs	r3, #24
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0018      	movs	r0, r3
 8000604:	2310      	movs	r3, #16
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f002 f863 	bl	80026d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	2310      	movs	r3, #16
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	0018      	movs	r0, r3
 8000614:	2308      	movs	r3, #8
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f002 f85b 	bl	80026d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	003b      	movs	r3, r7
 8000620:	0018      	movs	r0, r3
 8000622:	2310      	movs	r3, #16
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f002 f854 	bl	80026d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062c:	4b3f      	ldr	r3, [pc, #252]	; (800072c <MX_TIM2_Init+0x134>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	05d2      	lsls	r2, r2, #23
 8000632:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000634:	4b3d      	ldr	r3, [pc, #244]	; (800072c <MX_TIM2_Init+0x134>)
 8000636:	221f      	movs	r2, #31
 8000638:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <MX_TIM2_Init+0x134>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000640:	4b3a      	ldr	r3, [pc, #232]	; (800072c <MX_TIM2_Init+0x134>)
 8000642:	4a3b      	ldr	r2, [pc, #236]	; (8000730 <MX_TIM2_Init+0x138>)
 8000644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <MX_TIM2_Init+0x134>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_TIM2_Init+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <MX_TIM2_Init+0x134>)
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fa8b 	bl	8001b70 <HAL_TIM_Base_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800065e:	f000 f93f 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000662:	2118      	movs	r1, #24
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	0152      	lsls	r2, r2, #5
 800066a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066c:	187a      	adds	r2, r7, r1
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_TIM2_Init+0x134>)
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fcda 	bl	800202c <HAL_TIM_ConfigClockSource>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800067c:	f000 f930 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_TIM2_Init+0x134>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 faf8 	bl	8001c78 <HAL_TIM_PWM_Init>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800068c:	f000 f928 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2110      	movs	r1, #16
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	187a      	adds	r2, r7, r1
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_TIM2_Init+0x134>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 ffa1 	bl	80025ec <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80006ae:	f000 f917 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2260      	movs	r2, #96	; 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	0039      	movs	r1, r7
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_TIM2_Init+0x134>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fbe5 	bl	8001ea0 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80006da:	f000 f901 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006de:	0039      	movs	r1, r7
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_TIM2_Init+0x134>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fbdb 	bl	8001ea0 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80006ee:	f000 f8f7 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f2:	0039      	movs	r1, r7
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_TIM2_Init+0x134>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fbd1 	bl	8001ea0 <HAL_TIM_PWM_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000702:	f000 f8ed 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000706:	0039      	movs	r1, r7
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_TIM2_Init+0x134>)
 800070a:	220c      	movs	r2, #12
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fbc7 	bl	8001ea0 <HAL_TIM_PWM_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000716:	f000 f8e3 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <MX_TIM2_Init+0x134>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 f91d 	bl	800095c <HAL_TIM_MspPostInit>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b00a      	add	sp, #40	; 0x28
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000028 	.word	0x20000028
 8000730:	00004e1f 	.word	0x00004e1f

08000734 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	2318      	movs	r3, #24
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f001 ffc5 	bl	80026d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	2310      	movs	r3, #16
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	2308      	movs	r3, #8
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f001 ffbd 	bl	80026d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	003b      	movs	r3, r7
 800075c:	0018      	movs	r0, r3
 800075e:	2310      	movs	r3, #16
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f001 ffb6 	bl	80026d4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000768:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_TIM21_Init+0xf8>)
 800076a:	4a31      	ldr	r2, [pc, #196]	; (8000830 <MX_TIM21_Init+0xfc>)
 800076c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 320-1;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_TIM21_Init+0xf8>)
 8000770:	2240      	movs	r2, #64	; 0x40
 8000772:	32ff      	adds	r2, #255	; 0xff
 8000774:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_TIM21_Init+0xf8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 5000-1;
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_TIM21_Init+0xf8>)
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <MX_TIM21_Init+0x100>)
 8000780:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_TIM21_Init+0xf8>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM21_Init+0xf8>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_TIM21_Init+0xf8>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f9ed 	bl	8001b70 <HAL_TIM_Base_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 f8a1 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	2118      	movs	r1, #24
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0152      	lsls	r2, r2, #5
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_TIM21_Init+0xf8>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fc3c 	bl	800202c <HAL_TIM_ConfigClockSource>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 80007b8:	f000 f892 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM21_Init+0xf8>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fa5a 	bl	8001c78 <HAL_TIM_PWM_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80007c8:	f000 f88a 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007cc:	2110      	movs	r1, #16
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_TIM21_Init+0xf8>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ff03 	bl	80025ec <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 80007ea:	f000 f879 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2260      	movs	r2, #96	; 0x60
 80007f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2500;
 80007f4:	003b      	movs	r3, r7
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_TIM21_Init+0x104>)
 80007f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	0039      	movs	r1, r7
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_TIM21_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fb47 	bl	8001ea0 <HAL_TIM_PWM_ConfigChannel>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 8000816:	f000 f863 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <MX_TIM21_Init+0xf8>)
 800081c:	0018      	movs	r0, r3
 800081e:	f000 f89d 	bl	800095c <HAL_TIM_MspPostInit>

}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b00a      	add	sp, #40	; 0x28
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000068 	.word	0x20000068
 8000830:	40010800 	.word	0x40010800
 8000834:	00001387 	.word	0x00001387
 8000838:	000009c4 	.word	0x000009c4

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	240c      	movs	r4, #12
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	2314      	movs	r3, #20
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f001 ff41 	bl	80026d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000858:	2104      	movs	r1, #4
 800085a:	430a      	orrs	r2, r1
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	2204      	movs	r2, #4
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_GPIO_Init+0x9c>)
 800086c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000888:	2102      	movs	r1, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	2202      	movs	r2, #2
 8000894:	4013      	ands	r3, r2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	015b      	lsls	r3, r3, #5
 800089e:	480f      	ldr	r0, [pc, #60]	; (80008dc <MX_GPIO_Init+0xa0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	0019      	movs	r1, r3
 80008a4:	f000 fbdc 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0152      	lsls	r2, r2, #5
 80008ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <MX_GPIO_Init+0xa0>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	0010      	movs	r0, r2
 80008ca:	f000 fa53 	bl	8000d74 <HAL_GPIO_Init>

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b009      	add	sp, #36	; 0x24
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000
 80008dc:	50000400 	.word	0x50000400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_MspInit+0x24>)
 80008f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x24>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_MspInit+0x24>)
 80008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_MspInit+0x24>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0549      	lsls	r1, r1, #21
 8000906:	430a      	orrs	r2, r1
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	429a      	cmp	r2, r3
 8000926:	d106      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 800092a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 800092e:	2101      	movs	r1, #1
 8000930:	430a      	orrs	r2, r1
 8000932:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000934:	e00a      	b.n	800094c <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM21)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_TIM_Base_MspInit+0x44>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d105      	bne.n	800094c <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 8000942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_TIM_Base_MspInit+0x40>)
 8000946:	2104      	movs	r1, #4
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800

0800095c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	; 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2414      	movs	r4, #20
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	2314      	movs	r3, #20
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f001 feb0 	bl	80026d4 <memset>
  if(htim->Instance==TIM2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	429a      	cmp	r2, r3
 800097e:	d145      	bne.n	8000a0c <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 8000982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 8000986:	2101      	movs	r1, #1
 8000988:	430a      	orrs	r2, r1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 800099e:	2102      	movs	r1, #2
 80009a0:	430a      	orrs	r2, r1
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 80009a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a8:	2202      	movs	r2, #2
 80009aa:	4013      	ands	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	220b      	movs	r2, #11
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2202      	movs	r2, #2
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	193a      	adds	r2, r7, r4
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f9cc 	bl	8000d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	00d2      	lsls	r2, r2, #3
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2202      	movs	r2, #2
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_TIM_MspPostInit+0x10c>)
 8000a02:	0019      	movs	r1, r3
 8000a04:	0010      	movs	r0, r2
 8000a06:	f000 f9b5 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000a0a:	e027      	b.n	8000a5c <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM21)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_TIM_MspPostInit+0x110>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d122      	bne.n	8000a5c <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_TIM_MspPostInit+0x108>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	2202      	movs	r2, #2
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a2e:	2114      	movs	r1, #20
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0192      	lsls	r2, r2, #6
 8000a36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2206      	movs	r2, #6
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_TIM_MspPostInit+0x10c>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f000 f98c 	bl	8000d74 <HAL_GPIO_Init>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	50000400 	.word	0x50000400
 8000a6c:	40010800 	.word	0x40010800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f89e 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff fff7 	bl	8000a9e <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <LoopForever+0x6>)
    LDR R1, [R0]
 8000ab2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ab4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <LoopForever+0xa>)
    CMP R1, R2
 8000ab8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000aba:	d105      	bne.n	8000ac8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000abe:	4912      	ldr	r1, [pc, #72]	; (8000b08 <LoopForever+0x12>)
    STR R1, [R0]
 8000ac0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ac2:	4812      	ldr	r0, [pc, #72]	; (8000b0c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ac4:	4912      	ldr	r1, [pc, #72]	; (8000b10 <LoopForever+0x1a>)
    STR R1, [R0]
 8000ac6:	6001      	str	r1, [r0, #0]

08000ac8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000aca:	4913      	ldr	r1, [pc, #76]	; (8000b18 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <LoopForever+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ae0:	4c10      	ldr	r4, [pc, #64]	; (8000b24 <LoopForever+0x2e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f001 fdcd 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fcf5 	bl	80004e0 <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
   ldr   r0, =_estack
 8000af8:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000afc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b00:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b04:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b08:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b0c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b10:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	08002728 	.word	0x08002728
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	200000ac 	.word	0x200000ac

08000b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_IRQHandler>
	...

08000b2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_Init+0x3c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Init+0x3c>)
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f811 	bl	8000b6c <HAL_InitTick>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e001      	b.n	8000b5a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b56:	f7ff fec9 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_InitTick+0x60>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	23fa      	movs	r3, #250	; 0xfa
 8000b80:	0098      	lsls	r0, r3, #2
 8000b82:	f7ff fac1 	bl	8000108 <__udivsi3>
 8000b86:	0003      	movs	r3, r0
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f7ff fabc 	bl	8000108 <__udivsi3>
 8000b90:	0003      	movs	r3, r0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f8e1 	bl	8000d5a <HAL_SYSTICK_Config>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e00f      	b.n	8000bc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d80b      	bhi.n	8000bbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	425b      	negs	r3, r3
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f8be 	bl	8000d30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_InitTick+0x64>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	001a      	movs	r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x20>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	18d2      	adds	r2, r2, r3
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_IncTick+0x20>)
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000a8 	.word	0x200000a8

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <HAL_GetTick+0x10>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	200000a8 	.word	0x200000a8

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c20:	d828      	bhi.n	8000c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c22:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	33c0      	adds	r3, #192	; 0xc0
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	589b      	ldr	r3, [r3, r2]
 8000c32:	1dfa      	adds	r2, r7, #7
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	0011      	movs	r1, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	21ff      	movs	r1, #255	; 0xff
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	401a      	ands	r2, r3
 8000c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	22ff      	movs	r2, #255	; 0xff
 8000c50:	401a      	ands	r2, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0018      	movs	r0, r3
 8000c58:	2303      	movs	r3, #3
 8000c5a:	4003      	ands	r3, r0
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c72:	e031      	b.n	8000cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	400b      	ands	r3, r1
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3306      	adds	r3, #6
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001c      	movs	r4, r3
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	4023      	ands	r3, r4
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	3306      	adds	r3, #6
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	18c3      	adds	r3, r0, r3
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b003      	add	sp, #12
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	045b      	lsls	r3, r3, #17
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d301      	bcc.n	8000d00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e010      	b.n	8000d22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <SysTick_Config+0x44>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d08:	2301      	movs	r3, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff ff7c 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x44>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ffbf 	bl	8000ce8 <SysTick_Config>
 8000d6a:	0003      	movs	r3, r0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d8a:	e14f      	b.n	800102c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x30>
 8000da2:	e140      	b.n	8001026 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	58d3      	ldr	r3, [r2, r3]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2207      	movs	r2, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2107      	movs	r1, #7
 8000e92:	400b      	ands	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x17c>
 8000eee:	e09a      	b.n	8001026 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b54      	ldr	r3, [pc, #336]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efc:	4a52      	ldr	r2, [pc, #328]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	589b      	ldr	r3, [r3, r2]
 8000f08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x1ea>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1e6>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1de>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1da>
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	2103      	movs	r1, #3
 8000f64:	400a      	ands	r2, r1
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	035b      	lsls	r3, r3, #13
 8000f96:	4013      	ands	r3, r2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	039b      	lsls	r3, r3, #14
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	40da      	lsrs	r2, r3
 8001034:	1e13      	subs	r3, r2, #0
 8001036:	d000      	beq.n	800103a <HAL_GPIO_Init+0x2c6>
 8001038:	e6a8      	b.n	8000d8c <HAL_GPIO_Init+0x18>
  }
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b006      	add	sp, #24
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	50000400 	.word	0x50000400
 8001050:	50000800 	.word	0x50000800
 8001054:	50000c00 	.word	0x50000c00
 8001058:	50001c00 	.word	0x50001c00
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	0008      	movs	r0, r1
 800106a:	0011      	movs	r1, r2
 800106c:	1cbb      	adds	r3, r7, #2
 800106e:	1c02      	adds	r2, r0, #0
 8001070:	801a      	strh	r2, [r3, #0]
 8001072:	1c7b      	adds	r3, r7, #1
 8001074:	1c0a      	adds	r2, r1, #0
 8001076:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001078:	1c7b      	adds	r3, r7, #1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001080:	1cbb      	adds	r3, r7, #2
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800108a:	1cbb      	adds	r3, r7, #2
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f000 fb6c 	bl	8001788 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b0:	4bc8      	ldr	r3, [pc, #800]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	220c      	movs	r2, #12
 80010b6:	4013      	ands	r3, r2
 80010b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ba:	4bc6      	ldr	r3, [pc, #792]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	d100      	bne.n	80010d2 <HAL_RCC_OscConfig+0x36>
 80010d0:	e07d      	b.n	80011ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d007      	beq.n	80010e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d112      	bne.n	8001104 <HAL_RCC_OscConfig+0x68>
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d10d      	bne.n	8001104 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4bba      	ldr	r3, [pc, #744]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5a>
 80010f4:	e06a      	b.n	80011cc <HAL_RCC_OscConfig+0x130>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d166      	bne.n	80011cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f000 fb42 	bl	8001788 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	429a      	cmp	r2, r3
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x84>
 8001110:	4bb0      	ldr	r3, [pc, #704]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4baf      	ldr	r3, [pc, #700]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0249      	lsls	r1, r1, #9
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e027      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	02db      	lsls	r3, r3, #11
 8001128:	429a      	cmp	r2, r3
 800112a:	d10e      	bne.n	800114a <HAL_RCC_OscConfig+0xae>
 800112c:	4ba9      	ldr	r3, [pc, #676]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4ba8      	ldr	r3, [pc, #672]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	02c9      	lsls	r1, r1, #11
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4ba5      	ldr	r3, [pc, #660]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0249      	lsls	r1, r1, #9
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e012      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 800114a:	4ba2      	ldr	r3, [pc, #648]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4ba1      	ldr	r3, [pc, #644]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001150:	49a1      	ldr	r1, [pc, #644]	; (80013d8 <HAL_RCC_OscConfig+0x33c>)
 8001152:	400a      	ands	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4b9b      	ldr	r3, [pc, #620]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b9a      	ldr	r3, [pc, #616]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800116a:	499c      	ldr	r1, [pc, #624]	; (80013dc <HAL_RCC_OscConfig+0x340>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d014      	beq.n	80011a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fd3e 	bl	8000bf8 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fd39 	bl	8000bf8 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b64      	cmp	r3, #100	; 0x64
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e2f9      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0xe6>
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fd29 	bl	8000bf8 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fd24 	bl	8000bf8 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e2e4      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x110>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0x13e>
 80011d8:	e099      	b.n	800130e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	2220      	movs	r2, #32
 80011e4:	4013      	ands	r3, r2
 80011e6:	d009      	beq.n	80011fc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80011e8:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80011ee:	2120      	movs	r1, #32
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	2220      	movs	r2, #32
 80011f8:	4393      	bics	r3, r2
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d13e      	bne.n	8001286 <HAL_RCC_OscConfig+0x1ea>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d13b      	bne.n	8001286 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2204      	movs	r2, #4
 8001214:	4013      	ands	r3, r2
 8001216:	d004      	beq.n	8001222 <HAL_RCC_OscConfig+0x186>
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e2b2      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x344>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	021a      	lsls	r2, r3, #8
 8001232:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001238:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2209      	movs	r2, #9
 800123e:	4393      	bics	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124a:	f000 fbeb 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 800124e:	0001      	movs	r1, r0
 8001250:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	220f      	movs	r2, #15
 8001258:	4013      	ands	r3, r2
 800125a:	4a62      	ldr	r2, [pc, #392]	; (80013e4 <HAL_RCC_OscConfig+0x348>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	000a      	movs	r2, r1
 8001260:	40da      	lsrs	r2, r3
 8001262:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <HAL_RCC_OscConfig+0x34c>)
 8001264:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <HAL_RCC_OscConfig+0x350>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2513      	movs	r5, #19
 800126c:	197c      	adds	r4, r7, r5
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff fc7c 	bl	8000b6c <HAL_InitTick>
 8001274:	0003      	movs	r3, r0
 8001276:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001278:	197b      	adds	r3, r7, r5
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d046      	beq.n	800130e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001280:	197b      	adds	r3, r7, r5
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	e280      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	2b00      	cmp	r3, #0
 800128a:	d027      	beq.n	80012dc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800128c:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2209      	movs	r2, #9
 8001292:	4393      	bics	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fcab 	bl	8000bf8 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fca6 	bl	8000bf8 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e266      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2204      	movs	r2, #4
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f1      	beq.n	80012a8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_RCC_OscConfig+0x344>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	0019      	movs	r1, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	021a      	lsls	r2, r3, #8
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	e018      	b.n	800130e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	438a      	bics	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc86 	bl	8000bf8 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc81 	bl	8000bf8 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e241      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2204      	movs	r2, #4
 800130a:	4013      	ands	r3, r2
 800130c:	d1f1      	bne.n	80012f2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x27e>
 8001318:	e0a1      	b.n	800145e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d140      	bne.n	80013a2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x29c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e227      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <HAL_RCC_OscConfig+0x354>)
 800133e:	4013      	ands	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	0a19      	lsrs	r1, r3, #8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	061a      	lsls	r2, r3, #24
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	0b5b      	lsrs	r3, r3, #13
 8001366:	3301      	adds	r3, #1
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	0212      	lsls	r2, r2, #8
 800136c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	210f      	movs	r1, #15
 8001376:	400b      	ands	r3, r1
 8001378:	491a      	ldr	r1, [pc, #104]	; (80013e4 <HAL_RCC_OscConfig+0x348>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_RCC_OscConfig+0x34c>)
 8001380:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x350>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2513      	movs	r5, #19
 8001388:	197c      	adds	r4, r7, r5
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fbee 	bl	8000b6c <HAL_InitTick>
 8001390:	0003      	movs	r3, r0
 8001392:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001394:	197b      	adds	r3, r7, r5
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d060      	beq.n	800145e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800139c:	197b      	adds	r3, r7, r5
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	e1f2      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d03f      	beq.n	800142a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0049      	lsls	r1, r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc1e 	bl	8000bf8 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc19 	bl	8000bf8 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d911      	bls.n	80013f4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1d9      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	fffeffff 	.word	0xfffeffff
 80013dc:	fffbffff 	.word	0xfffbffff
 80013e0:	ffffe0ff 	.word	0xffffe0ff
 80013e4:	080026fc 	.word	0x080026fc
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004
 80013f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0e0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001400:	4bc6      	ldr	r3, [pc, #792]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4ac6      	ldr	r2, [pc, #792]	; (8001720 <HAL_RCC_OscConfig+0x684>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1a      	ldr	r2, [r3, #32]
 800140e:	4bc3      	ldr	r3, [pc, #780]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001414:	4bc1      	ldr	r3, [pc, #772]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	0a19      	lsrs	r1, r3, #8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	061a      	lsls	r2, r3, #24
 8001422:	4bbe      	ldr	r3, [pc, #760]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	e019      	b.n	800145e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800142a:	4bbc      	ldr	r3, [pc, #752]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4bbb      	ldr	r3, [pc, #748]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001430:	49bc      	ldr	r1, [pc, #752]	; (8001724 <HAL_RCC_OscConfig+0x688>)
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fbdf 	bl	8000bf8 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001440:	f7ff fbda 	bl	8000bf8 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e19a      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001452:	4bb2      	ldr	r3, [pc, #712]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2208      	movs	r2, #8
 8001464:	4013      	ands	r3, r2
 8001466:	d036      	beq.n	80014d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001470:	4baa      	ldr	r3, [pc, #680]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001474:	4ba9      	ldr	r3, [pc, #676]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fbbc 	bl	8000bf8 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fbb7 	bl	8000bf8 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e177      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001498:	4ba0      	ldr	r3, [pc, #640]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800149a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d0f1      	beq.n	8001486 <HAL_RCC_OscConfig+0x3ea>
 80014a2:	e018      	b.n	80014d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b9d      	ldr	r3, [pc, #628]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a8:	4b9c      	ldr	r3, [pc, #624]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fba2 	bl	8000bf8 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb9d 	bl	8000bf8 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e15d      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014cc:	4b93      	ldr	r3, [pc, #588]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d0:	2202      	movs	r2, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f1      	bne.n	80014ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2204      	movs	r2, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x446>
 80014e0:	e0ae      	b.n	8001640 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2023      	movs	r0, #35	; 0x23
 80014e4:	183b      	adds	r3, r7, r0
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	055b      	lsls	r3, r3, #21
 80014f2:	4013      	ands	r3, r2
 80014f4:	d109      	bne.n	800150a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0549      	lsls	r1, r1, #21
 8001500:	430a      	orrs	r2, r1
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001504:	183b      	adds	r3, r7, r0
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b87      	ldr	r3, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x68c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <HAL_RCC_OscConfig+0x68c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_RCC_OscConfig+0x68c>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001524:	f7ff fb68 	bl	8000bf8 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fb63 	bl	8000bf8 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e123      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <HAL_RCC_OscConfig+0x68c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	429a      	cmp	r2, r3
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x4cc>
 8001558:	4b70      	ldr	r3, [pc, #448]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800155a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155c:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0049      	lsls	r1, r1, #1
 8001562:	430a      	orrs	r2, r1
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
 8001566:	e031      	b.n	80015cc <HAL_RCC_OscConfig+0x530>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x4ee>
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001576:	496b      	ldr	r1, [pc, #428]	; (8001724 <HAL_RCC_OscConfig+0x688>)
 8001578:	400a      	ands	r2, r1
 800157a:	651a      	str	r2, [r3, #80]	; 0x50
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800157e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001582:	496a      	ldr	r1, [pc, #424]	; (800172c <HAL_RCC_OscConfig+0x690>)
 8001584:	400a      	ands	r2, r1
 8001586:	651a      	str	r2, [r3, #80]	; 0x50
 8001588:	e020      	b.n	80015cc <HAL_RCC_OscConfig+0x530>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	429a      	cmp	r2, r3
 8001594:	d10e      	bne.n	80015b4 <HAL_RCC_OscConfig+0x518>
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800159a:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	430a      	orrs	r2, r1
 80015a2:	651a      	str	r2, [r3, #80]	; 0x50
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a8:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0049      	lsls	r1, r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	651a      	str	r2, [r3, #80]	; 0x50
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x530>
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015ba:	495a      	ldr	r1, [pc, #360]	; (8001724 <HAL_RCC_OscConfig+0x688>)
 80015bc:	400a      	ands	r2, r1
 80015be:	651a      	str	r2, [r3, #80]	; 0x50
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015c6:	4959      	ldr	r1, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x690>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb10 	bl	8000bf8 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015dc:	e009      	b.n	80015f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fb0b 	bl	8000bf8 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_RCC_OscConfig+0x694>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0ca      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80015f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d0ef      	beq.n	80015de <HAL_RCC_OscConfig+0x542>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fafa 	bl	8000bf8 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001608:	e009      	b.n	800161e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff faf5 	bl	8000bf8 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	4a46      	ldr	r2, [pc, #280]	; (8001730 <HAL_RCC_OscConfig+0x694>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b4      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1ef      	bne.n	800160a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162a:	2323      	movs	r3, #35	; 0x23
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800163a:	493e      	ldr	r1, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x698>)
 800163c:	400a      	ands	r2, r1
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x5ae>
 8001648:	e09d      	b.n	8001786 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x5b6>
 8001650:	e076      	b.n	8001740 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2b02      	cmp	r3, #2
 8001658:	d145      	bne.n	80016e6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_RCC_OscConfig+0x680>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_RCC_OscConfig+0x69c>)
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fac7 	bl	8000bf8 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fac2 	bl	8000bf8 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e082      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x6a0>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	431a      	orrs	r2, r3
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0449      	lsls	r1, r1, #17
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa9c 	bl	8000bf8 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fa97 	bl	8000bf8 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e057      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	049b      	lsls	r3, r3, #18
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x62a>
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_RCC_OscConfig+0x680>)
 80016ec:	4912      	ldr	r1, [pc, #72]	; (8001738 <HAL_RCC_OscConfig+0x69c>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa81 	bl	8000bf8 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa7c 	bl	8000bf8 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e03c      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800170e:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_RCC_OscConfig+0x680>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049b      	lsls	r3, r3, #18
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x660>
 800171a:	e034      	b.n	8001786 <HAL_RCC_OscConfig+0x6ea>
 800171c:	40021000 	.word	0x40021000
 8001720:	ffff1fff 	.word	0xffff1fff
 8001724:	fffffeff 	.word	0xfffffeff
 8001728:	40007000 	.word	0x40007000
 800172c:	fffffbff 	.word	0xfffffbff
 8001730:	00001388 	.word	0x00001388
 8001734:	efffffff 	.word	0xefffffff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x6f4>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	429a      	cmp	r2, r3
 8001760:	d10f      	bne.n	8001782 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	23f0      	movs	r3, #240	; 0xf0
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b00a      	add	sp, #40	; 0x28
 800178e:	bdb0      	pop	{r4, r5, r7, pc}
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e128      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d91e      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017c8:	f7ff fa16 	bl	8000bf8 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d2:	f7ff fa11 	bl	8000bf8 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a8a      	ldr	r2, [pc, #552]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e109      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d009      	beq.n	8001812 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fe:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	22f0      	movs	r2, #240	; 0xf0
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 800180e:	430a      	orrs	r2, r1
 8001810:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_ClockConfig+0x8a>
 800181c:	e089      	b.n	8001932 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001826:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	4013      	ands	r3, r2
 8001830:	d120      	bne.n	8001874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0e1      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	049b      	lsls	r3, r3, #18
 8001846:	4013      	ands	r3, r2
 8001848:	d114      	bne.n	8001874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0d5      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d106      	bne.n	8001864 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001856:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d109      	bne.n	8001874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0ca      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001864:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0c2      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001874:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2203      	movs	r2, #3
 800187a:	4393      	bics	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001884:	430a      	orrs	r2, r1
 8001886:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f9b6 	bl	8000bf8 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d111      	bne.n	80018bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001898:	e009      	b.n	80018ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f7ff f9ad 	bl	8000bf8 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0a5      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	220c      	movs	r2, #12
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d1ef      	bne.n	800189a <HAL_RCC_ClockConfig+0x106>
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	e009      	b.n	80018da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7ff f997 	bl	8000bf8 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e08f      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	220c      	movs	r2, #12
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d1ef      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x132>
 80018e6:	e024      	b.n	8001932 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d11b      	bne.n	8001928 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f0:	e009      	b.n	8001906 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f2:	f7ff f981 	bl	8000bf8 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e079      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	220c      	movs	r2, #12
 800190c:	4013      	ands	r3, r2
 800190e:	2b04      	cmp	r3, #4
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x15e>
 8001912:	e00e      	b.n	8001932 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f970 	bl	8000bf8 <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e068      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	220c      	movs	r2, #12
 800192e:	4013      	ands	r3, r2
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d21e      	bcs.n	800197e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4393      	bics	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001952:	f7ff f951 	bl	8000bf8 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	e009      	b.n	8001970 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f94c 	bl	8000bf8 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_RCC_ClockConfig+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e044      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d1ee      	bne.n	800195c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x27c>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2208      	movs	r2, #8
 80019a2:	4013      	ands	r3, r2
 80019a4:	d00a      	beq.n	80019bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a1a      	ldr	r2, [pc, #104]	; (8001a14 <HAL_RCC_ClockConfig+0x280>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00da      	lsls	r2, r3, #3
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019bc:	f000 f832 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019c0:	0001      	movs	r1, r0
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x278>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	220f      	movs	r2, #15
 80019ca:	4013      	ands	r3, r2
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x284>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	000a      	movs	r2, r1
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_ClockConfig+0x288>)
 80019d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_ClockConfig+0x28c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	250b      	movs	r5, #11
 80019de:	197c      	adds	r4, r7, r5
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff f8c3 	bl	8000b6c <HAL_InitTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019ea:	197b      	adds	r3, r7, r5
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019f2:	197b      	adds	r3, r7, r5
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	e000      	b.n	80019fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40022000 	.word	0x40022000
 8001a08:	00001388 	.word	0x00001388
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	fffff8ff 	.word	0xfffff8ff
 8001a14:	ffffc7ff 	.word	0xffffc7ff
 8001a18:	080026fc 	.word	0x080026fc
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a2a:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a32:	230c      	movs	r3, #12
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d014      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3a:	d900      	bls.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a3c:	e07b      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x112>
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x24>
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e076      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a56:	e07c      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5c:	e079      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a62:	e076      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	0c9a      	lsrs	r2, r3, #18
 8001a68:	230f      	movs	r3, #15
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x148>)
 8001a6e:	5c9b      	ldrb	r3, [r3, r2]
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	0d9a      	lsrs	r2, r3, #22
 8001a76:	2303      	movs	r3, #3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	4013      	ands	r3, r2
 8001a88:	d01a      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a94:	2300      	movs	r3, #0
 8001a96:	69b8      	ldr	r0, [r7, #24]
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	f7fe fbe1 	bl	8000260 <__aeabi_lmul>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	000b      	movs	r3, r1
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f7fe fbb5 	bl	8000220 <__aeabi_uldivmod>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	000b      	movs	r3, r1
 8001aba:	0013      	movs	r3, r2
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
 8001abe:	e037      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d01a      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	68b8      	ldr	r0, [r7, #8]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	f7fe fbc1 	bl	8000260 <__aeabi_lmul>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f7fe fb95 	bl	8000220 <__aeabi_uldivmod>
 8001af6:	0002      	movs	r2, r0
 8001af8:	000b      	movs	r3, r1
 8001afa:	0013      	movs	r3, r2
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
 8001afe:	e017      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	0018      	movs	r0, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	0019      	movs	r1, r3
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f7fe fba8 	bl	8000260 <__aeabi_lmul>
 8001b10:	0002      	movs	r2, r0
 8001b12:	000b      	movs	r3, r1
 8001b14:	0010      	movs	r0, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	001c      	movs	r4, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	001d      	movs	r5, r3
 8001b20:	0022      	movs	r2, r4
 8001b22:	002b      	movs	r3, r5
 8001b24:	f7fe fb7c 	bl	8000220 <__aeabi_uldivmod>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	000b      	movs	r3, r1
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b34:	e00d      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	4013      	ands	r3, r2
 8001b40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	3301      	adds	r3, #1
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0212      	lsls	r2, r2, #8
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b50:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b00e      	add	sp, #56	; 0x38
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	003d0900 	.word	0x003d0900
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	0800270c 	.word	0x0800270c

08001b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e032      	b.n	8001be8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2239      	movs	r2, #57	; 0x39
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2238      	movs	r2, #56	; 0x38
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe febb 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2239      	movs	r2, #57	; 0x39
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3304      	adds	r3, #4
 8001bae:	0019      	movs	r1, r3
 8001bb0:	0010      	movs	r0, r2
 8001bb2:	f000 fb0f 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223e      	movs	r2, #62	; 0x3e
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	223a      	movs	r2, #58	; 0x3a
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	223b      	movs	r2, #59	; 0x3b
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	223c      	movs	r2, #60	; 0x3c
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223d      	movs	r2, #61	; 0x3d
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2239      	movs	r2, #57	; 0x39
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2239      	movs	r2, #57	; 0x39
 8001bfc:	5c9b      	ldrb	r3, [r3, r2]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d001      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e031      	b.n	8001c6c <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2239      	movs	r2, #57	; 0x39
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d004      	beq.n	8001c36 <HAL_TIM_Base_Start_IT+0x46>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_TIM_Base_Start_IT+0x84>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d111      	bne.n	8001c5a <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b06      	cmp	r3, #6
 8001c46:	d010      	beq.n	8001c6a <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c58:	e007      	b.n	8001c6a <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010800 	.word	0x40010800

08001c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e032      	b.n	8001cf0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2239      	movs	r2, #57	; 0x39
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2238      	movs	r2, #56	; 0x38
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f829 	bl	8001cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2239      	movs	r2, #57	; 0x39
 8001caa:	2102      	movs	r1, #2
 8001cac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	0010      	movs	r0, r2
 8001cba:	f000 fa8b 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223e      	movs	r2, #62	; 0x3e
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	223a      	movs	r2, #58	; 0x3a
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223b      	movs	r2, #59	; 0x3b
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223c      	movs	r2, #60	; 0x3c
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223d      	movs	r2, #61	; 0x3d
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2239      	movs	r2, #57	; 0x39
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	230f      	movs	r3, #15
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <HAL_TIM_PWM_Start_IT+0x2a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	223a      	movs	r2, #58	; 0x3a
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	4193      	sbcs	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e01f      	b.n	8001d72 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d108      	bne.n	8001d4a <HAL_TIM_PWM_Start_IT+0x42>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	223b      	movs	r2, #59	; 0x3b
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4193      	sbcs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e013      	b.n	8001d72 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d108      	bne.n	8001d62 <HAL_TIM_PWM_Start_IT+0x5a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	223c      	movs	r2, #60	; 0x3c
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4193      	sbcs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e007      	b.n	8001d72 <HAL_TIM_PWM_Start_IT+0x6a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223d      	movs	r2, #61	; 0x3d
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	4193      	sbcs	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e08b      	b.n	8001e92 <HAL_TIM_PWM_Start_IT+0x18a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <HAL_TIM_PWM_Start_IT+0x82>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	223a      	movs	r2, #58	; 0x3a
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	e013      	b.n	8001db2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d104      	bne.n	8001d9a <HAL_TIM_PWM_Start_IT+0x92>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223b      	movs	r2, #59	; 0x3b
 8001d94:	2102      	movs	r1, #2
 8001d96:	5499      	strb	r1, [r3, r2]
 8001d98:	e00b      	b.n	8001db2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_PWM_Start_IT+0xa2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	223c      	movs	r2, #60	; 0x3c
 8001da4:	2102      	movs	r1, #2
 8001da6:	5499      	strb	r1, [r3, r2]
 8001da8:	e003      	b.n	8001db2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	223d      	movs	r2, #61	; 0x3d
 8001dae:	2102      	movs	r1, #2
 8001db0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d02a      	beq.n	8001e0e <HAL_TIM_PWM_Start_IT+0x106>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d830      	bhi.n	8001e20 <HAL_TIM_PWM_Start_IT+0x118>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_PWM_Start_IT+0xf4>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d82a      	bhi.n	8001e20 <HAL_TIM_PWM_Start_IT+0x118>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_PWM_Start_IT+0xd0>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d009      	beq.n	8001dea <HAL_TIM_PWM_Start_IT+0xe2>
 8001dd6:	e023      	b.n	8001e20 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2102      	movs	r1, #2
 8001de4:	430a      	orrs	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]
      break;
 8001de8:	e01f      	b.n	8001e2a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2104      	movs	r1, #4
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
      break;
 8001dfa:	e016      	b.n	8001e2a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2108      	movs	r1, #8
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]
      break;
 8001e0c:	e00d      	b.n	8001e2a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2110      	movs	r1, #16
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
      break;
 8001e1e:	e004      	b.n	8001e2a <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
      break;
 8001e28:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d12b      	bne.n	8001e8c <HAL_TIM_PWM_Start_IT+0x184>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 fbb1 	bl	80025a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	05db      	lsls	r3, r3, #23
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d004      	beq.n	8001e58 <HAL_TIM_PWM_Start_IT+0x150>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_TIM_PWM_Start_IT+0x194>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_TIM_PWM_Start_IT+0x174>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d010      	beq.n	8001e8c <HAL_TIM_PWM_Start_IT+0x184>
      {
        __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e007      	b.n	8001e8c <HAL_TIM_PWM_Start_IT+0x184>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2317      	movs	r3, #23
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2238      	movs	r2, #56	; 0x38
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e0ad      	b.n	800201e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2238      	movs	r2, #56	; 0x38
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d100      	bne.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ed0:	e076      	b.n	8001fc0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d900      	bls.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001ed8:	e095      	b.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d04e      	beq.n	8001f7e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d900      	bls.n	8001ee8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001ee6:	e08e      	b.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d021      	beq.n	8001f38 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001ef4:	e087      	b.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	0011      	movs	r1, r2
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f9b2 	bl	8002268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2108      	movs	r1, #8
 8001f10:	430a      	orrs	r2, r1
 8001f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6999      	ldr	r1, [r3, #24]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	619a      	str	r2, [r3, #24]
      break;
 8001f36:	e06b      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f9cd 	bl	80022e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0109      	lsls	r1, r1, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4931      	ldr	r1, [pc, #196]	; (8002028 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6999      	ldr	r1, [r3, #24]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	021a      	lsls	r2, r3, #8
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	619a      	str	r2, [r3, #24]
      break;
 8001f7c:	e048      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 f9ec 	bl	8002364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2108      	movs	r1, #8
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	438a      	bics	r2, r1
 8001faa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69d9      	ldr	r1, [r3, #28]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]
      break;
 8001fbe:	e027      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 fa0b 	bl	80023e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	0109      	lsls	r1, r1, #4
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	490f      	ldr	r1, [pc, #60]	; (8002028 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69d9      	ldr	r1, [r3, #28]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	61da      	str	r2, [r3, #28]
      break;
 8002004:	e004      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002006:	2317      	movs	r3, #23
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
      break;
 800200e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2238      	movs	r2, #56	; 0x38
 8002014:	2100      	movs	r1, #0
 8002016:	5499      	strb	r1, [r3, r2]

  return status;
 8002018:	2317      	movs	r3, #23
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b006      	add	sp, #24
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	fffffbff 	.word	0xfffffbff

0800202c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	230f      	movs	r3, #15
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2238      	movs	r2, #56	; 0x38
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_TIM_ConfigClockSource+0x20>
 8002048:	2302      	movs	r3, #2
 800204a:	e0bc      	b.n	80021c6 <HAL_TIM_ConfigClockSource+0x19a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2239      	movs	r2, #57	; 0x39
 8002058:	2102      	movs	r1, #2
 800205a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2277      	movs	r2, #119	; 0x77
 8002068:	4393      	bics	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	0192      	lsls	r2, r2, #6
 8002084:	4293      	cmp	r3, r2
 8002086:	d040      	beq.n	800210a <HAL_TIM_ConfigClockSource+0xde>
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	0192      	lsls	r2, r2, #6
 800208c:	4293      	cmp	r3, r2
 800208e:	d900      	bls.n	8002092 <HAL_TIM_ConfigClockSource+0x66>
 8002090:	e088      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0152      	lsls	r2, r2, #5
 8002096:	4293      	cmp	r3, r2
 8002098:	d100      	bne.n	800209c <HAL_TIM_ConfigClockSource+0x70>
 800209a:	e088      	b.n	80021ae <HAL_TIM_ConfigClockSource+0x182>
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0152      	lsls	r2, r2, #5
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d900      	bls.n	80020a6 <HAL_TIM_ConfigClockSource+0x7a>
 80020a4:	e07e      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020a6:	2b70      	cmp	r3, #112	; 0x70
 80020a8:	d018      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0xb0>
 80020aa:	d900      	bls.n	80020ae <HAL_TIM_ConfigClockSource+0x82>
 80020ac:	e07a      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020ae:	2b60      	cmp	r3, #96	; 0x60
 80020b0:	d04f      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x126>
 80020b2:	d900      	bls.n	80020b6 <HAL_TIM_ConfigClockSource+0x8a>
 80020b4:	e076      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020b6:	2b50      	cmp	r3, #80	; 0x50
 80020b8:	d03b      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x106>
 80020ba:	d900      	bls.n	80020be <HAL_TIM_ConfigClockSource+0x92>
 80020bc:	e072      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d057      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x146>
 80020c2:	d900      	bls.n	80020c6 <HAL_TIM_ConfigClockSource+0x9a>
 80020c4:	e06e      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020c6:	2b30      	cmp	r3, #48	; 0x30
 80020c8:	d063      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x166>
 80020ca:	d86b      	bhi.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d060      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x166>
 80020d0:	d868      	bhi.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d05d      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x166>
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d05b      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x166>
 80020da:	e063      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f000 fa3a 	bl	8002564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2277      	movs	r2, #119	; 0x77
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
      break;
 8002108:	e052      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f000 fa23 	bl	8002564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	01c9      	lsls	r1, r1, #7
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
      break;
 8002130:	e03e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	001a      	movs	r2, r3
 8002140:	f000 f996 	bl	8002470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2150      	movs	r1, #80	; 0x50
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f9f0 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 8002150:	e02e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	001a      	movs	r2, r3
 8002160:	f000 f9b4 	bl	80024cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2160      	movs	r1, #96	; 0x60
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f9e0 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 8002170:	e01e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	001a      	movs	r2, r3
 8002180:	f000 f976 	bl	8002470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f9d0 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 8002190:	e00e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0019      	movs	r1, r3
 800219c:	0010      	movs	r0, r2
 800219e:	f000 f9c7 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 80021a2:	e005      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021a4:	230f      	movs	r3, #15
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
      break;
 80021ac:	e000      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2239      	movs	r2, #57	; 0x39
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2238      	movs	r2, #56	; 0x38
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

  return status;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b004      	add	sp, #16
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	ffff00ff 	.word	0xffff00ff

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	05db      	lsls	r3, r3, #23
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x22>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <TIM_Base_SetConfig+0x8c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2270      	movs	r2, #112	; 0x70
 80021fa:	4393      	bics	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	429a      	cmp	r2, r3
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0x46>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <TIM_Base_SetConfig+0x8c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <TIM_Base_SetConfig+0x90>)
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	4393      	bics	r3, r2
 8002232:	001a      	movs	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	615a      	str	r2, [r3, #20]
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40010800 	.word	0x40010800
 8002264:	fffffcff 	.word	0xfffffcff

08002268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2201      	movs	r2, #1
 8002278:	4393      	bics	r3, r2
 800227a:	001a      	movs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2270      	movs	r2, #112	; 0x70
 8002296:	4393      	bics	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2203      	movs	r2, #3
 800229e:	4393      	bics	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4393      	bics	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	621a      	str	r2, [r3, #32]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2210      	movs	r2, #16
 80022f0:	4393      	bics	r3, r2
 80022f2:	001a      	movs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a13      	ldr	r2, [pc, #76]	; (800235c <TIM_OC2_SetConfig+0x7c>)
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <TIM_OC2_SetConfig+0x80>)
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2220      	movs	r2, #32
 800232a:	4393      	bics	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	621a      	str	r2, [r3, #32]
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	ffff8fff 	.word	0xffff8fff
 8002360:	fffffcff 	.word	0xfffffcff

08002364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_OC3_SetConfig+0x78>)
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2270      	movs	r2, #112	; 0x70
 8002390:	4393      	bics	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2203      	movs	r2, #3
 8002398:	4393      	bics	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <TIM_OC3_SetConfig+0x7c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	621a      	str	r2, [r3, #32]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b006      	add	sp, #24
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	fffffeff 	.word	0xfffffeff
 80023e0:	fffffdff 	.word	0xfffffdff

080023e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <TIM_OC4_SetConfig+0x7c>)
 80023f4:	401a      	ands	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <TIM_OC4_SetConfig+0x80>)
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <TIM_OC4_SetConfig+0x84>)
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <TIM_OC4_SetConfig+0x88>)
 800242c:	4013      	ands	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	031b      	lsls	r3, r3, #12
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b006      	add	sp, #24
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	ffffefff 	.word	0xffffefff
 8002464:	ffff8fff 	.word	0xffff8fff
 8002468:	fffffcff 	.word	0xfffffcff
 800246c:	ffffdfff 	.word	0xffffdfff

08002470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	2201      	movs	r2, #1
 8002488:	4393      	bics	r3, r2
 800248a:	001a      	movs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	22f0      	movs	r2, #240	; 0xf0
 800249a:	4393      	bics	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	220a      	movs	r2, #10
 80024ac:	4393      	bics	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	621a      	str	r2, [r3, #32]
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bd80      	pop	{r7, pc}

080024cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	2210      	movs	r2, #16
 80024de:	4393      	bics	r3, r2
 80024e0:	001a      	movs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <TIM_TI2_ConfigInputStage+0x60>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	031b      	lsls	r3, r3, #12
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	22a0      	movs	r2, #160	; 0xa0
 8002508:	4393      	bics	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b006      	add	sp, #24
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ffff0fff 	.word	0xffff0fff

08002530 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2270      	movs	r2, #112	; 0x70
 8002544:	4393      	bics	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	2207      	movs	r2, #7
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <TIM_ETR_SetConfig+0x3c>)
 800257c:	4013      	ands	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	021a      	lsls	r2, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	431a      	orrs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	ffff00ff 	.word	0xffff00ff

080025a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	221f      	movs	r2, #31
 80025b4:	4013      	ands	r3, r2
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	0013      	movs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	43d2      	mvns	r2, r2
 80025c6:	401a      	ands	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	211f      	movs	r1, #31
 80025d4:	400b      	ands	r3, r1
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4099      	lsls	r1, r3
 80025da:	000b      	movs	r3, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b006      	add	sp, #24
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2238      	movs	r2, #56	; 0x38
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e03d      	b.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2238      	movs	r2, #56	; 0x38
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2239      	movs	r2, #57	; 0x39
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2270      	movs	r2, #112	; 0x70
 8002628:	4393      	bics	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d004      	beq.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10c      	bne.n	800266e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	4393      	bics	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	4313      	orrs	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2239      	movs	r2, #57	; 0x39
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2238      	movs	r2, #56	; 0x38
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40010800 	.word	0x40010800

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2600      	movs	r6, #0
 8002690:	4d0c      	ldr	r5, [pc, #48]	; (80026c4 <__libc_init_array+0x38>)
 8002692:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002694:	1b64      	subs	r4, r4, r5
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	2600      	movs	r6, #0
 800269e:	f000 f821 	bl	80026e4 <_init>
 80026a2:	4d0a      	ldr	r5, [pc, #40]	; (80026cc <__libc_init_array+0x40>)
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <__libc_init_array+0x44>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	00b3      	lsls	r3, r6, #2
 80026b2:	58eb      	ldr	r3, [r5, r3]
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	00b3      	lsls	r3, r6, #2
 80026bc:	58eb      	ldr	r3, [r5, r3]
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	08002720 	.word	0x08002720
 80026c8:	08002720 	.word	0x08002720
 80026cc:	08002720 	.word	0x08002720
 80026d0:	08002724 	.word	0x08002724

080026d4 <memset>:
 80026d4:	0003      	movs	r3, r0
 80026d6:	1882      	adds	r2, r0, r2
 80026d8:	4293      	cmp	r3, r2
 80026da:	d100      	bne.n	80026de <memset+0xa>
 80026dc:	4770      	bx	lr
 80026de:	7019      	strb	r1, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	e7f9      	b.n	80026d8 <memset+0x4>

080026e4 <_init>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

080026f0 <_fini>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr
